package upgrad;

import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import org.bson.Document;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class Driver {

    private final static String CATEGORY = "Category";
    private final static String MOBILE = "Mobile";
    private final static String HEADPHONE = "Headphone";
    private final static String CAMERA = "Camera";

    /**
     * Driver class main method
     *
     * @param args Standard input args
     * @throws SQLException throws SQLException as occurred
     */
    public static void main(String[] args) throws SQLException {
        // MySql credentials
        final String upgradRdsSqlUrl =
                "jdbc:mysql://pgc-sd-bigdata.cyaielc9bmnf.us-east-1.rds.amazonaws.com:3306/pgcdata";
        final String upgradRdsUserName = "student";
        final String upgradRdsPassword = "STUDENT123";

        // MongoDB Configurations
        final String mongoConnectionStr = "mongodb://34.237.144.181:27017";
        final String mongoDbName = "pgcdata";
        final String mongoDbCollectionName = "products";

        // Connection Default Value Initialization
        Connection sqlConnection = null;
        MongoClient mongoClient = null;

        try {
            // Creating database connections
            sqlConnection = DriverManager.getConnection(upgradRdsSqlUrl, upgradRdsUserName, upgradRdsPassword);
            mongoClient = MongoClients.create(mongoConnectionStr);
            MongoDatabase mongoDb = mongoClient.getDatabase(mongoDbName);
            MongoCollection<Document> collection = mongoDb.getCollection(mongoDbCollectionName);

            // TODO initialize mongo DB collections, by deleting documents part of the collections,
            //  such data / documents gets loaded on clean mongo db Collection from the remote SQL RDS,
            //  thus output remains consistent across upon multiple executions.
            //  Shall remove or modify this behavior, as per best practice principles or requirements.
            collection.deleteMany(new Document());

            // Import data into MongoDb
            importRDSVarcharTablesToMongoDb(sqlConnection, collection);

            // List all products in the inventory
            CRUDHelper.displayAllProducts(collection);

            // Display top 5 Mobiles
            CRUDHelper.displayTop5Mobiles(collection);

            // Display products ordered by their categories in Descending Order Without autogenerated Id
            CRUDHelper.displayCategoryOrderedProductsDescending(collection);

            // Display product count in each category
            CRUDHelper.displayProductCountByCategory(collection);

            // Display wired headphones
            CRUDHelper.displayWiredHeadphones(collection);

            // TODO Cleanup documents from mongo DB collections, to mark clean completion.
            //  Shall remove or modify this behavior, as per best practice principles or requirements.
            //  Currently, commented this operation, as assignment evaluators shall not be able to verify the
            //  db from console post execution of this application.
            // collection.deleteMany(new Document());

        } catch (SQLException sqlException) {
            System.out.println("Unexpected SQL Exception.");
            throw sqlException;
        } catch (Exception ex) {
            System.out.println("Got Exception.");
            ex.printStackTrace();
        } finally {
            // Close SQL Connection
            if (sqlConnection != null) {
                try {
                    sqlConnection.close();
                } catch (SQLException sqlException) {
                    System.out.println("Unexpected SQL Exception while Closing connection.");
                    sqlException.printStackTrace();
                }
            }

            // Close MongoDB Connections
            if (null != mongoClient) {
                mongoClient.close();
            }
        }
    }

    /**
     * Method to import multiple RDS SQL table with only VARCHAR (String) fields to Mongo DB
     *
     * @param sqlConnection SQL Connection Object
     * @param mongoCollection Mongo DB Collection Object
     *
     * @throws SQLException Throws SQLException
     */
    private static void importRDSVarcharTablesToMongoDb(Connection sqlConnection,
                                                        MongoCollection<Document> mongoCollection) throws SQLException {

        // Import all records of "mobiles" tables
        String queryMobilesTable = "select * from mobiles";
        insertVarcharTableToMongoDb(sqlConnection, mongoCollection, queryMobilesTable, MOBILE);

        // Import all records of "cameras" tables
        String queryCamerasTable = "select * from cameras";
        insertVarcharTableToMongoDb(sqlConnection, mongoCollection, queryCamerasTable, CAMERA);

        // Import all records of "headphones" tables
        String queryHeadphonesTable = "select * from headphones";
        insertVarcharTableToMongoDb(sqlConnection, mongoCollection, queryHeadphonesTable, HEADPHONE);

    }

    /**
     * Method to import records fetched by given sql query on a RDS SQL table with only VARCHAR (String) fields by
     * adding a new category field referring to product category to Mongo DB.
     * This method currently fetches records by paging 10 records at once. This shall be set as per needs.
     *
     * @param sqlConnection SQL Connection Object
     * @param mongoCollection Mongo DB Collection Object
     * @param sqlQuery SQL query to fetch records by querying the SQL DB
     * @param categoryName Product Category name
     *
     * @throws SQLException Throws SQLException
     */
    private static void insertVarcharTableToMongoDb(Connection sqlConnection,
                                                    MongoCollection<Document> mongoCollection,
                                                    String sqlQuery,
                                                    String categoryName) throws SQLException {
        Statement statement = sqlConnection.createStatement();
        ResultSet resultSet = statement.executeQuery(sqlQuery);
        // Currently setting JDBC to fetch records by paging 10 records at once, JDBC shall tune it as per its internal
        // logic. This number is currently set indicative & shall be tuned as per needs.
        resultSet.setFetchSize(10);

        ResultSetMetaData resultSetMetaData = resultSet.getMetaData();

        // fetch list of Document objects & insert all Documents at once instead of inserting documents one by one.
        List<Document> mobileDocumentList = getDocumentList(resultSet, resultSetMetaData, categoryName);
        mongoCollection.insertMany(mobileDocumentList);
    }

    /**
     * Method to construct Mongo Document object for each records.
     * This method uses {@param resultSetMetaData} to fetch individual fields of each records as present part of
     * {@param resultSet} returned upon querying SQL table with only VARCHAR/String fields.
     *
     * @param resultSet SQL Connection Object
     * @param resultSetMetaData Mongo DB Collection Object
     * @param categoryName Product Category name
     *
     * @throws SQLException Throws SQLException
     */
    private static List<Document> getDocumentList(ResultSet resultSet, ResultSetMetaData resultSetMetaData,
                                                  String categoryName) throws SQLException {
        String colName;
        List<Document> documentList = new ArrayList<Document>();

        while (resultSet.next()) {
            Document doc = new Document();

            for (int i = 1; i <= resultSetMetaData.getColumnCount(); i++) {
                colName = resultSetMetaData.getColumnName(i);
                doc.append(colName, resultSet.getString(colName));
            }

            // insert new field "category"
            doc.append(CATEGORY, categoryName);
            documentList.add(doc);
        }

        return documentList;
    }
}
